Struct __Test_cHashTable_Struct
    String StringMember
    Integer IntegerMember
    String[] ArrayMember
End_Struct

{Unit Test Method}
Function __Test_cHashTable Global Returns Boolean
    Handle h
    String sPut sRet
    String[] saPut saRet
    __Test_cHashTable_Struct tPut tRet
    __Test_cHashTable_Struct[] taPut taRet
    Integer iTests
    
    Showln "Testing cHashTable..."
    
    Get Create U_cHashTable to h
    If (h <= 0) Begin
        Showln "Could not create instance"
        Function_Return False
    End
    
    //Simple data type check
    Move "cHashTable" to sPut
    Set Value of h "test1" to sPut
    Get Value of h "test1" to sRet
    If (sPut <> sRet) Begin
        Showln "Simple data type check failed"
        Function_Return False
    End
    Increment iTests
    
    //Data length check
    Move (Repeat("cHashTable", 1000)) to sPut
    Set Value of h "test2" to sPut
    Get Value of h "test2" to sRet
    If (length(sPut) <> length(sRet)) Begin
        Showln "Data length check failed"
        Function_Return False
    End
    Increment iTests
    
    //Array data type check
    Move "A" to saPut[0]
    Move "B" to saPut[1]
    Move "C" to saPut[2]
    Set Value of h "test3" to saPut
    Get Value of h "test3" to saRet
    If (SizeOfArray(saPut) <> SizeOfArray(saRet)) Begin
        Showln "Array data type check failed"
        Function_Return False
    End
    If (saPut[2] <> saRet[2]) Begin
        Showln "Array data type check failed"
        Function_Return False
    End
    Increment iTests

    //Struct data type check
    Move "cHashTable" to tPut.StringMember
    Move 1234 to tPut.IntegerMember
    Move "A" to tPut.ArrayMember[0]
    Move "B" to tPut.ArrayMember[1]
    Move "C" to tPut.ArrayMember[2]
    Set Value of h "test4" to tPut
    Get Value of h "test4" to tRet
    If (tPut.StringMember <> tRet.StringMember) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (tPut.IntegerMember <> tRet.IntegerMember) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (SizeOfArray(tPut.ArrayMember) <> SizeOfArray(tRet.ArrayMember)) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (tPut.ArrayMember[2] <> tRet.ArrayMember[2]) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    Increment iTests

    //Struct array data type check
    Move "cHashTable" to taPut[0].StringMember
    Move 1234 to taPut[0].IntegerMember
    Move "A" to taPut[0].ArrayMember[0]
    Move "B" to taPut[0].ArrayMember[1]
    Move "C" to taPut[0].ArrayMember[2]
    Set Value of h "test5" to taPut
    Get Value of h "test5" to taRet
    If (taPut[0].StringMember <> taPut[0].StringMember) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (taPut[0].IntegerMember <> taPut[0].IntegerMember) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (SizeOfArray(taPut[0].ArrayMember) <> SizeOfArray(taPut[0].ArrayMember)) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    If (taPut[0].ArrayMember[2] <> taPut[0].ArrayMember[2]) Begin
        Showln "Struct data type check failed"
        Function_Return False
    End
    Increment iTests

    //Get keys check
    Get Keys of h to saRet
    If (SizeOfArray(saRet) <> iTests) Begin
        Showln "Get keys check failed"
        Function_Return False
    End
    If (saRet[iTests-1] <> ("test" + String(iTests))) Begin
        Showln "Get keys check failed"
        Function_Return False
    End
    
    // Load test
    Integer i iCheck
    For i from 1 to (10 * 1000)
        Set Value of h (String(i)) to i
    Loop
    Get Value of h "10000" to iCheck
    If (iCheck <> (10 * 1000)) Begin
        Showln "Load test failed"
        Function_Return False 
    End
    
    Send Destroy of h
    
    Showln "Testing cHashTable... OK"
    Function_Return True
    
End_Function